В системе у пользователя есть уникальный идентификатор 
пользователя, называемый UID (user identifier). Каждая программа запускается от имени пользователя и имеет связанный с ней UID.
______________________________________________________________________
1. #include <sys/types.h>
файл библиотеки. Здесь, в том числе и в частности, объявляется тип uid_t
Вообще в этом файле объявляются системные типы данных, такие как u_int, u_char
Входит в C POSIX library - языконезависимая библиотека, добавляющая специфичексие
функции в систему POSIX.
______________________________________________________________________
2. #include <unistd.h>
unistd.h -- заголовочный файл объявляет ряд специфичных для реализации функций: 	getuid(), 	geteuid(), setuid()...
______________________________________________________________________
3. #include <stdio.h>
заголовочный файл ввода-вывода. Часть стандартной библиотеки языка C. Использует
так называемые потоки для работы с клавиатурой, принтерами и тп.
Стандартный ввод, стандартный вывод, стандартный поток ошибок.
______________________________________________________________________
4. define ERROR -1
Директива #define определяет идентификатор и последовательность символов, 
которой будет замещаться данный идентификатор при его обнаружении в тексте 
программы. 
______________________________________________________________________
5. printf("\nReal user ID: %d\n", getuid());
Функция printf() записывает в stdout строку "Real user ID:" и значение, 
полученное функцией getuid().
 %d -- спецификатор формата (десятичного числа целого типа со знаком).
______________________________________________________________________
6. getuid() geteuid()
getuid() возвращает фактический идентификатор (ID) пользователя вызывающего процесса.
geteuid() возвращает эффективный идентификатор (ID) пользователя в текущем процессе.
______________________________________________________________________
7. FILE *file1 = fopen("file1.txt", "r");
 создание объекта типа FILE, открытие файла под названием file1.txt для чтения
______________________________________________________________________
8. if (file1 == NULL) { // проверка на успешное открытие файла
        perror ("The file cannot be opened"); // Функция perror() выводит сообщение об ошибке в stderr
    } else {
        printf("The file opened successfully\n");
        fclose(file1); 
    }        
при успешном открытии файла выводим в stdout строку "The file opened successfully\n" и закрываем файл, с которым работали//при успешном открытии файла выводим в stdout строку "The file opened successfully\n" и закрываем файл, с которым работали
______________________________________________________________________
9.int checkID = seteuid(getuid());
 seteuid -- установка идентификаторов пользователя
 
