В системе у пользователя также есть уникальный идентификатор 
пользователя, называемый UID (user identifier). Каждая программа, 
выполняемая Linux, запускается от имени пользователя и имеет связанный с ней UID.
______________________________________________________________________
1. #include <sys/types.h>
файл библиотеки. Здесь, в том числе и в частности, объявляется тип uid_t
Суть этого файла заключается в том, чтобы улучшить переносимость кода и 
гарантировать инвариантность семантики переменных. Унификация.
Вообще в этом файле объявляются системные типы данных, такие как u_int, u_char
Входит в C POSIX library - языконезависимая библиотека, добавляющая специфичексие
функции в систему POSIX.
POSIX - стандарт, который специфицирует (конкретизирует) интерфейс, доступный
программисту
______________________________________________________________________
2. #include <unistd.h>

______________________________________________________________________
3. #include <stdio.h>
заголовочный файл ввода-вывода. Часть стандартной библиотеки языка C. Использует
так называемые потоки для работы с клавиатурой, принтерами и тп.
Стандартный ввод, стандартный вывод, стандартный поток ошибок.
______________________________________________________________________
4. define ERROR -1
Директива #define определяет идентификатор и последовательность символов, 
которой будет замещаться данный идентификатор при его обнаружении в тексте 
программы. Идентификатор также называется именем макроса, а процесс замещения 
называется подстановкой макроса. Стандартный вид директивы следующий:
#define имя_макроса последовательность_символовprintf("\nReal user ID: %d\n", getuid());
______________________________________________________________________
5. printf("\nReal user ID: %d\n", getuid());
Функция printf() записывает в stdout строку "Real user ID:" и значение, 
полученное функцией getuid().
 %d -- спецификатор формата (десятичного числа целого типа со знаком).
При успешном завершении вывода возвращается количество выведенных символов.
При шибке возвращается отрицательное число.
Каждый спецификатор формата начинается с символа '%' и имеет следующий формат:
%[флаги][ширина][точность][модификаторы][тип преобразования]
______________________________________________________________________
6. getuid() geteuid()
Функция getuid() (get user id) возвращает реальный идентификатор пользователя 
для текущего процесса, который установлен в соответствие идентификатору 
вызывающего процесса.
Функция geteuid() (get effective user id) возвращает эффективный идентификатор 
пользователя, который устанавливается в соответствии с битом set ID на 
запускаемом файле.
Фактический ID соответствует ID пользователя, который вызвал процесс. 
Эффективный ID соответствует установленному setuid биту на исполняемом файле.
______________________________________________________________________
7. FILE *file1 = fopen("file1.txt", "r");
Этот тип данных определяет поток и содержит информацию, необходимую для 
управления потоком, в том числе указатель на буфер  потока, и его показатели состояния.
Файловые объекты обычно создаются с помощью вызова функций fopen, 
которая возвращает ссылку на объект связанный с файлом.
Если файл был успешно открыт, функция возвращает указатель на объект файла, 
который используется для идентификации потока и выполнения операций с файлом.
 В противном случае, возвращается нулевой указатель.
______________________________________________________________________
8. fclose(file1)
Функция fclose закрывает и разъединяет файл filestream, связанный с потоком.
Если файл успешно закрыт, возвращается нулевое значение.
В случае ошибки, возвращается EOF.
______________________________________________________________________
9.int checkID = seteuid(getuid());
 устанавливает эффективный идентификатор пользователя вызывающего процесса. 
При успешном выполнении возвращается 0. В случае ошибки возвращается -1, 
а errno устанавливается в соответствующее значение.